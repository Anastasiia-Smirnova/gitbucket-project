name: Build and Deploy to S3

on:
  push:
    branches:
      - feature-test
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache sbt
      uses: actions/cache@v2
      with:
        path: |
          ~/.sbt
          ~/.m2
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build with sbt
      run: |
        sbt executable
        ls -la

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 

    - name: Upload .war to S3
      run: |
        ls -la
        ls -la target
        ls -la target/executable
        aws s3 cp target/executable/gitbucket.war s3://elasticbeanstalk-eu-central-1-538547716265/gitbucket_${GITHUB_RUN_NUMBER}.war

  terraform:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./tff

    steps:
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.5"   
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -auto-approve -no-color -var=¬´gitbucket_version=${GITHUB_RUN_NUMBER}¬ª
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })    

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -no-color -var=¬´gitbucket_version=${GITHUB_RUN_NUMBER}¬ª
      continue-on-error: true    
