name: Build and Apply Terraform

on:
  push:
    branches:
      - "*"
      - main

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env:
      APP_ENV: dev
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set env var based on branch
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "APP_ENV=prod" >> $GITHUB_ENV
        fi

    - name: Cache sbt
      uses: actions/cache@v2
      with:
        path: |
          ~/.sbt
          ~/.m2
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build with sbt
      run: |
        sbt executable

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 

    - name: Upload .war to S3
      run: |
        aws s3 cp target/executable/gitbucket.war s3://elasticbeanstalk-eu-central-1-538547716265/${APP_ENV}/gitbucket_${GITHUB_RUN_NUMBER}.war

  execute-ansible:
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup Python for Ansible
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
      
      - name: Execute Ansible Playbook
        run: ansible-playbook ansible/playbooks/gitbucket.yaml -e "app_env=${{ needs.build-and-upload.outputs.APP_ENV }} github_run_number=${{ github.run_number }}"
        env:
          APP_ENV: ${{ needs.build-and-upload.outputs.APP_ENV }}