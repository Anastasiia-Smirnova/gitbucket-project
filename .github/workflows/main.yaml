name: Build and Apply Terraform

on:
  push:
    branches:
      - "*"
      - main

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env:
      APP_ENV: dev
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set env var based on branch
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "APP_ENV=prod" >> $GITHUB_ENV
        fi

    - name: Cache sbt
      uses: actions/cache@v2
      with:
        path: |
          ~/.sbt
          ~/.m2
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Build with sbt
      run: |
        sbt executable

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 

    - name: Upload .war to S3
      run: |
        aws s3 cp target/executable/gitbucket.war s3://elasticbeanstalk-eu-central-1-538547716265/${APP_ENV}/gitbucket_${GITHUB_RUN_NUMBER}.war

  execute-terraform-and-ansible:
    needs: build-and-upload
    runs-on: ubuntu-latest
    env:
      APP_ENV: dev
    defaults:
      run:
        working-directory: ansible
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set env var based on branch
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "APP_ENV=prod" >> $GITHUB_ENV
          fi

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: | 
          echo "app env ${APP_ENV}"
          pwd
          terraform init
          terraform workspace select ${APP_ENV}
          terraform output --json > ../ansible/tf_output.json
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform workspace select ${APP_ENV}
          terraform plan -no-color -var="gitbucket_version=${GITHUB_RUN_NUMBER}"
        continue-on-error: true
        working-directory: terraform

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })  
          working-directory: terraform

      - name: Determine Active Environment
        id: determine-env
        run: |
          chmod +x ./active_env.sh
          ACTIVE_ENV=$(./active_env.sh)
          if [ "$ACTIVE_ENV" = "blue" ]; then
            echo "OPPOSITE_ENV=green" >> $GITHUB_ENV
          else
            echo "OPPOSITE_ENV=blue" >> $GITHUB_ENV
          fi
          echo "ACTIVE_ENV=${ACTIVE_ENV}" >> $GITHUB_ENV

      - name: Fetch Instance IPs
        id: get-ips
        run: echo "::set-output name=ips::$(terraform output -json instance_ips | jq -r '.[]')"

      - name: Terraform Apply
        id: apply
        run: |
          terraform workspace select ${APP_ENV} 
          echo "ACTIVE_ENV=$ACTIVE_ENV"

          if [ "$ACTIVE_ENV" == "blue" ]; then
            echo "TF_VAR_instance_count_green=2" >> $GITHUB_ENV
          else
            echo "TF_VAR_instance_count_blue=2" >> $GITHUB_ENV
          fi

          echo "GITHUB_ENV=$GITHUB_ENV"

          terraform apply -auto-approve -no-color -var="gitbucket_version=${GITHUB_RUN_NUMBER}"
        continue-on-error: true
        working-directory: terraform

      - name: Health check
        id: check
        run: |
          IFS=',' read -r -a instance_array <<< "${{ steps.get-ips.outputs.ips }}"
          if ./health_check.sh "${instance_array[@]}"; then
            echo "Health check passed."

            if [ "$ACTIVE_ENV" == "blue" ]; then
              echo "TF_VAR_instance_count_blue=0" >> $GITHUB_ENV
              terraform apply -auto-approve -no-color -var="gitbucket_version=${GITHUB_RUN_NUMBER}"
            else
              echo "TF_VAR_instance_count_green=0" >> $GITHUB_ENV
              terraform apply -auto-approve -no-color -var="gitbucket_version=${GITHUB_RUN_NUMBER}"
            fi

            echo "GITHUB_ENV=$GITHUB_ENV"

          else
            echo "Health check failed, no changes applied." 
        continue-on-error: true
        working-directory: terraform

      - name: Install AWS CLI
        run: |
          pip install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1   
      
      - name: Setup Python for Ansible
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          pip install botocore
          pip install boto3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Verify jq installation
        run: |
          jq --version
      
      - name: Execute Ansible Playbook
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-central-1"
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

          if: env.OPPOSITE_ENV == 'blue' || env.OPPOSITE_ENV == 'green'
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" >> ./id_rsa
          chmod 600 ./id_rsa
          DB_ENDPOINT=$(cat tf_output.json | jq -r '.db_endpoint.value')
          DB_URL="jdbc:mysql://${DB_ENDPOINT}/gitbucket?useUnicode=true&characterEncoding=utf8&allowPublicKeyRetrieval=true&serverRsaPublicKeyFile=/gitbucket/public_key.pem"

          echo "Deploying to ${{ env.OPPOSITE_ENV }}"
          ansible-playbook -i ./inventory gitbucket_${{ env.OPPOSITE_ENV }}.yaml  -e "aws_region=$AWS_REGION aws_secret_access_key=$AWS_SECRET_ACCESS_KEY aws_access_key_id=$AWS_ACCESS_KEY_ID app_env=$APP_ENV github_run_number=${{ github.run_number }} db_url=$DB_URL db_user=$DB_USER db_password=$DB_PASSWORD"
